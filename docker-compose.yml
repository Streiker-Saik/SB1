services:
  web:
    build: .
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_started
    environment:
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      EMAIL_HOST: ${POSTGRES_PASSWORD}
      EMAIL_PORT: ${POSTGRES_PASSWORD}
      EMAIL_USE_TLS: ${POSTGRES_PASSWORD}
      EMAIL_USE_SSL: ${POSTGRES_PASSWORD}
      EMAIL_HOST_USER: ${POSTGRES_PASSWORD}
      EMAIL_HOST_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"

  migrate:
    build: .
    command: python manage.py migrate --noinput
    restart: "no"
    environment:
      SECRET_KEY: ${SECRET_KEY}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy

  static_collector:
    build: .
    environment:
      SECRET_KEY: ${SECRET_KEY}
    command: python manage.py collectstatic --noinput
    volumes:
      - static_volume:/app/staticfiles

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles #/usr/share/nginx/html/static/
    depends_on:
      web:
        condition: service_started

  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 3s
      retries: 10

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli ping
      interval: 2s
      timeout: 2s
      retries: 5

  celery:
    build: .
    command: celery -A config worker -l INFO
    environment:
      SECRET_KEY: ${SECRET_KEY}
      REDIS_HOST: redis
      POSTGRES_HOST: db
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: celery -A config inspect ping
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  static_volume:
